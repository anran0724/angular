// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sinodom.ElevatorCloud.EntityFrameworkCore;

namespace Sinodom.ElevatorCloud.Migrations
{
    [DbContext(typeof(ElevatorCloudDbContext))]
    [Migration("20190305110354_Changed_ArgumentValue_TYPE_TO_INT")]
    partial class Changed_ArgumentValue_TYPE_TO_INT
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.IdentityServer4.PersistedGrantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("AbpPersistedGrants");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<string>("GoogleAuthenticatorKey");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<Guid?>("ProfilePictureId");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<bool>("ShouldChangePasswordOnNextLogin");

                    b.Property<string>("SignInToken");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4096);

                    b.Property<int>("ReadState");

                    b.Property<int>("ReceiverReadState");

                    b.Property<Guid?>("SharedMessageId");

                    b.Property<int>("Side");

                    b.Property<int?>("TargetTenantId");

                    b.Property<long>("TargetUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TargetTenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TargetTenantId", "UserId", "ReadState");

                    b.HasIndex("TenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TenantId", "UserId", "ReadState");

                    b.ToTable("AppChatMessages");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseAnnualInspectionUnits.ECCPBaseAnnualInspectionUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addresse")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("DistrictId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("ProvinceId");

                    b.Property<int?>("StreetId");

                    b.Property<string>("Summary");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StreetId");

                    b.ToTable("ECCPBaseAnnualInspectionUnits");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaCode")
                        .HasMaxLength(12);

                    b.Property<int?>("AreaTypeCode");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ParentId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ECCPBaseAreas");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseCommunities.ECCPBaseCommunity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("DistrictId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("ProvinceId");

                    b.Property<int?>("StreetId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StreetId");

                    b.ToTable("ECCPBaseCommunities");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseMaintenanceCompanies.ECCPBaseMaintenanceCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addresse")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("DistrictId");

                    b.Property<bool?>("IsAudit");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("OrgOrganizationalCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ProvinceId");

                    b.Property<int?>("StreetId");

                    b.Property<string>("Summary");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StreetId");

                    b.ToTable("ECCPBaseMaintenanceCompanies");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseMaintenanceCompanies.EccpMaintenanceCompanyChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenanceCompanyId");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceCompanyId");

                    b.ToTable("EccpMaintenanceCompanyChangeLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseProductionCompanies.ECCPBaseProductionCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addresse")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("DistrictId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("ProvinceId");

                    b.Property<int?>("StreetId");

                    b.Property<string>("Summary");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StreetId");

                    b.ToTable("ECCPBaseProductionCompanies");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBasePropertyCompanies.ECCPBasePropertyCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addresse")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("DistrictId");

                    b.Property<bool?>("IsAudit");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("OrgOrganizationalCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ProvinceId");

                    b.Property<int?>("StreetId");

                    b.Property<string>("Summary");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StreetId");

                    b.ToTable("ECCPBasePropertyCompanies");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBasePropertyCompanies.EccpPropertyCompanyChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("PropertyCompanyId");

                    b.HasKey("Id");

                    b.HasIndex("PropertyCompanyId");

                    b.ToTable("EccpPropertyCompanyChangeLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseRegisterCompanies.ECCPBaseRegisterCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addresse")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("DistrictId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("ProvinceId");

                    b.Property<int?>("StreetId");

                    b.Property<string>("Summary");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StreetId");

                    b.ToTable("ECCPBaseRegisterCompanies");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpAppVersions.EccpAppVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("UpdateLog")
                        .HasMaxLength(200);

                    b.Property<string>("VersionCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("VersionType")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("EccpAppVersions");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevatorBrands.EccpBaseElevatorBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("ProductionCompanyId");

                    b.HasKey("Id");

                    b.HasIndex("ProductionCompanyId");

                    b.ToTable("EccpBaseElevatorBrands");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevatorLabels.EccpBaseElevatorLabel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BinaryObjectsId");

                    b.Property<DateTime?>("BindingTime");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid?>("ElevatorId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("LabelStatusId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LocalInformation")
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.HasIndex("LabelStatusId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("EccpBaseElevatorLabels");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevatorLabels.EccpBaseElevatorLabelBindLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BinaryObjectsId");

                    b.Property<DateTime?>("BindingTime");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid?>("ElevatorId");

                    b.Property<long>("ElevatorLabelId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("LabelStatusId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LocalInformation")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.HasIndex("LabelStatusId");

                    b.ToTable("EccpBaseElevatorLabelBindLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevatorModels.EccpBaseElevatorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("ElevatorBrandId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ElevatorBrandId");

                    b.ToTable("EccpBaseElevatorModels");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertificateNum")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("DistrictId");

                    b.Property<long?>("ECCPBaseAnnualInspectionUnitId");

                    b.Property<long?>("ECCPBaseCommunityId");

                    b.Property<int?>("ECCPBaseMaintenanceCompanyId");

                    b.Property<long?>("ECCPBaseProductionCompanyId");

                    b.Property<int?>("ECCPBasePropertyCompanyId");

                    b.Property<long?>("ECCPBaseRegisterCompanyId");

                    b.Property<int?>("ECCPDictElevatorStatusId");

                    b.Property<int?>("EccpBaseElevatorBrandId");

                    b.Property<int?>("EccpBaseElevatorModelId");

                    b.Property<int?>("EccpDictElevatorTypeId");

                    b.Property<int?>("EccpDictPlaceTypeId");

                    b.Property<string>("InstallationAddress")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("InstallationDatetime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("MachineNum")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("OrgLevel");

                    b.Property<int?>("ProvinceId");

                    b.Property<int?>("StreetId");

                    b.Property<int?>("SyncElevatorId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ECCPBaseAnnualInspectionUnitId");

                    b.HasIndex("ECCPBaseCommunityId");

                    b.HasIndex("ECCPBaseMaintenanceCompanyId");

                    b.HasIndex("ECCPBaseProductionCompanyId");

                    b.HasIndex("ECCPBasePropertyCompanyId");

                    b.HasIndex("ECCPBaseRegisterCompanyId");

                    b.HasIndex("ECCPDictElevatorStatusId");

                    b.HasIndex("EccpBaseElevatorBrandId");

                    b.HasIndex("EccpBaseElevatorModelId");

                    b.HasIndex("EccpDictElevatorTypeId");

                    b.HasIndex("EccpDictPlaceTypeId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StreetId");

                    b.ToTable("EccpBaseElevators");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevatorSubsidiaryInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CustomNum")
                        .HasMaxLength(50);

                    b.Property<double?>("Deadweight");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid?>("ElevatorId");

                    b.Property<int?>("FloorNumber");

                    b.Property<int?>("GateNumber");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ManufacturingLicenseNumber")
                        .HasMaxLength(50);

                    b.Property<double?>("RatedSpeed");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.ToTable("EccpBaseElevatorSubsidiaryInfos");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevators.EccpElevatorChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid>("ElevatorId");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.ToTable("EccpElevatorChangeLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevators.ElevatorClaimLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid>("ElevatorId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.HasIndex("TenantId");

                    b.ToTable("ElevatorClaimLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseSaicUnits.EccpBaseSaicUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("DistrictId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("ProvinceId");

                    b.Property<int?>("StreetId");

                    b.Property<string>("Summary")
                        .HasMaxLength(2000);

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StreetId");

                    b.HasIndex("TenantId");

                    b.ToTable("EccpBaseSaicUnits");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpDict.ECCPDictElevatorStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorStyle")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("ECCPDictElevatorStatuses");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpDict.EccpDictElevatorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("EccpDictElevatorTypes");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpDict.EccpDictLabelStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("EccpDictLabelStatuses");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpDict.EccpDictMaintenanceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DisOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("TermCode")
                        .HasMaxLength(50);

                    b.Property<string>("TermDesc")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("EccpDictMaintenanceItems");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpDict.EccpDictMaintenanceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("EccpDictMaintenanceStatuses");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpDict.EccpDictMaintenanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("EccpDictMaintenanceTypes");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpDict.EccpDictMaintenanceWorkFlowStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("EccpDictMaintenanceWorkFlowStatuses");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpDict.EccpDictNodeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("EccpDictNodeTypes");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpDict.EccpDictPlaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("EccpDictPlaceTypes");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpDict.EccpDictTempWorkOrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("EccpDictTempWorkOrderTypes");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpDict.EccpDictWorkOrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("EccpDictWorkOrderTypes");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpElevatorQrCodes.EccpElevatorQrCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid?>("ElevatorId");

                    b.Property<string>("ElevatorNum")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("GrantDateTime");

                    b.Property<string>("ImgPicture")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("InstallDateTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGrant");

                    b.Property<bool>("IsInstall");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.HasIndex("TenantId");

                    b.ToTable("EccpElevatorQrCodes");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpElevatorQrCodes.EccpElevatorQrCodeBindLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("NewElevatorId");

                    b.Property<Guid?>("NewQrCodeId");

                    b.Property<Guid?>("OldElevatorId");

                    b.Property<Guid?>("OldQrCodeId");

                    b.Property<string>("Remark");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("NewElevatorId");

                    b.HasIndex("NewQrCodeId");

                    b.HasIndex("OldElevatorId");

                    b.HasIndex("OldQrCodeId");

                    b.ToTable("EccpElevatorQrCodeBindLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceContracts.EccpMaintenanceContract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractPictureDesc")
                        .HasMaxLength(250);

                    b.Property<Guid?>("ContractPictureId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStop");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenanceCompanyId");

                    b.Property<int>("PropertyCompanyId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("StopContractRemarks")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("StopDate");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceCompanyId");

                    b.HasIndex("PropertyCompanyId");

                    b.HasIndex("TenantId");

                    b.ToTable("EccpMaintenanceContracts");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceContracts.EccpMaintenanceContract_Elevator_Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid?>("ElevatorId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("MaintenanceContractId");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.HasIndex("MaintenanceContractId");

                    b.ToTable("EccpMaintenanceContract_Elevator_Links");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid>("ElevatorId");

                    b.Property<bool>("IsCancel");

                    b.Property<bool>("IsClose");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("PlanGroupGuid");

                    b.Property<int>("PollingPeriod");

                    b.Property<int>("RemindHour");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorId");

                    b.HasIndex("TenantId");

                    b.ToTable("EccpMaintenancePlans");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlanCustomRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("HalfYearPollingPeriod");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("PlanGroupGuid");

                    b.Property<int>("QuarterPollingPeriod");

                    b.Property<int>("TenantId");

                    b.Property<int>("YearPollingPeriod");

                    b.HasKey("Id");

                    b.ToTable("EccpMaintenancePlanCustomRules");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlan_MaintenanceUser_Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenancePlanId");

                    b.Property<int>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenancePlanId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("EccpMaintenancePlan_MaintenanceUser_Links");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlan_PropertyUser_Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenancePlanId");

                    b.Property<int>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenancePlanId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("EccpMaintenancePlan_PropertyUser_Links");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlan_Template_Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenancePlanId");

                    b.Property<int>("MaintenanceTemplateId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenancePlanId");

                    b.HasIndex("MaintenanceTemplateId");

                    b.HasIndex("TenantId");

                    b.ToTable("EccpMaintenancePlan_Template_Links");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTempWorkOrderActionLogs.EccpMaintenanceTempWorkOrderActionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CheckState");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<Guid>("TempWorkOrderId");

                    b.Property<int>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TempWorkOrderId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("EccpMaintenanceTempWorkOrderActionLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTempWorkOrders.EccpMaintenanceTempWorkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CheckState");

                    b.Property<DateTime?>("CompletionTime");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Describe")
                        .HasMaxLength(500);

                    b.Property<Guid>("ElevatorId");

                    b.Property<int>("MaintenanceCompanyId");

                    b.Property<int>("Priority");

                    b.Property<int>("TempWorkOrderTypeId");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceCompanyId");

                    b.HasIndex("TempWorkOrderTypeId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("EccpMaintenanceTempWorkOrders");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTemplateNodes.EccpMaintenanceTemplateNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionCode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DictNodeTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenanceTemplateId");

                    b.Property<bool>("MustDo");

                    b.Property<int?>("NextNodeId");

                    b.Property<string>("NodeDesc")
                        .HasMaxLength(250);

                    b.Property<int>("NodeIndex");

                    b.Property<int?>("ParentNodeId");

                    b.Property<int?>("SpareNodeId");

                    b.Property<string>("TemplateNodeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DictNodeTypeId");

                    b.HasIndex("MaintenanceTemplateId");

                    b.HasIndex("TenantId");

                    b.ToTable("EccpMaintenanceTemplateNodes");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTemplateNodes.EccpMaintenanceTemplateNode_DictMaintenanceItem_Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DictMaintenanceItemId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenanceTemplateNodeId");

                    b.Property<int>("Sort");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DictMaintenanceItemId");

                    b.HasIndex("MaintenanceTemplateNodeId");

                    b.ToTable("EccpMaintenanceTemplateNode_DictMaintenanceItem_Links");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTemplates.EccpMaintenanceTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("ElevatorTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenanceTypeId");

                    b.Property<string>("TempAllow")
                        .HasMaxLength(20);

                    b.Property<string>("TempCondition")
                        .HasMaxLength(30);

                    b.Property<string>("TempDeny")
                        .HasMaxLength(20);

                    b.Property<string>("TempDesc")
                        .HasMaxLength(250);

                    b.Property<string>("TempName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TempNodeCount");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ElevatorTypeId");

                    b.HasIndex("MaintenanceTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("EccpMaintenanceTemplates");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTransfers.EccpMaintenanceTempWorkOrderTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("MaintenanceTempWorkOrderId");

                    b.Property<string>("Remark");

                    b.Property<int>("TenantId");

                    b.Property<long>("TransferUserId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceTempWorkOrderId");

                    b.HasIndex("TransferUserId");

                    b.ToTable("EccpMaintenanceTempWorkOrderTransfers");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTransfers.EccpMaintenanceTempWorkOrderTransferAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenanceTempWorkOrderTransferId");

                    b.Property<string>("Remark");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceTempWorkOrderTransferId");

                    b.ToTable("EccpMaintenanceTempWorkOrderTransferAuditLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTransfers.EccpMaintenanceWorkOrderTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenanceWorkOrderId");

                    b.Property<string>("Remark");

                    b.Property<int>("TenantId");

                    b.Property<long>("TransferUserId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceWorkOrderId");

                    b.HasIndex("TransferUserId");

                    b.ToTable("EccpMaintenanceWorkOrderTransfers");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTransfers.EccpMaintenanceWorkOrderTransferAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenanceWorkOrderTransferId");

                    b.Property<string>("Remark");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceWorkOrderTransferId");

                    b.ToTable("EccpMaintenanceWorkOrderTransferAuditLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorkOrders.EccpMaintenanceTroubledWorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("IsAudit");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenanceWorkOrderId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.Property<string>("TroubledDesc")
                        .HasMaxLength(500);

                    b.Property<string>("WorkOrderStatusName")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceWorkOrderId");

                    b.HasIndex("TenantId");

                    b.ToTable("EccpMaintenanceTroubledWorkOrders");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorkOrders.EccpMaintenanceWorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ComplateDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsComplete");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPassed");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int>("MaintenancePlanId");

                    b.Property<int>("MaintenanceStatusId");

                    b.Property<int>("MaintenanceTypeId");

                    b.Property<DateTime>("PlanCheckDate");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenancePlanId");

                    b.HasIndex("MaintenanceStatusId");

                    b.HasIndex("MaintenanceTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("EccpMaintenanceWorkOrders");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorkOrders.EccpMaintenanceWorkOrderEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Rank");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<int>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("EccpMaintenanceWorkOrderEvaluations");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorkOrders.EccpMaintenanceWorkOrder_MaintenanceUser_Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenancePlanId");

                    b.Property<int>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("EccpMaintenanceWorkOrder_MaintenanceUser_Links");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorkOrders.EccpMaintenanceWorkOrder_PropertyUser_Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenancePlanId");

                    b.Property<int>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("EccpMaintenanceWorkOrder_PropertyUser_Links");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorks.EccpMaintenanceWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EccpMaintenanceTemplateId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int>("MaintenanceWorkOrderId");

                    b.Property<string>("Remark")
                        .HasMaxLength(250);

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceWorkOrderId");

                    b.HasIndex("TenantId");

                    b.ToTable("EccpMaintenanceWorks");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorks.EccpMaintenanceWorkFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionCodeValue")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DictMaintenanceWorkFlowStatusId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int>("MaintenanceTemplateNodeId");

                    b.Property<int>("MaintenanceWorkId");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DictMaintenanceWorkFlowStatusId");

                    b.HasIndex("MaintenanceTemplateNodeId");

                    b.HasIndex("MaintenanceWorkId");

                    b.HasIndex("TenantId");

                    b.ToTable("EccpMaintenanceWorkFlows");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorks.EccpMaintenanceWorkFlow_Item_Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DictMaintenanceItemId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsQualified");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("MaintenanceWorkFlowId");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("DictMaintenanceItemId");

                    b.HasIndex("MaintenanceWorkFlowId");

                    b.ToTable("EccpMaintenanceWorkFlow_Item_Links");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorks.EccpMaintenanceWorkFlow_Refuse_Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("MaintenanceWorkFlowId");

                    b.Property<Guid?>("RefusePictureId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceWorkFlowId");

                    b.ToTable("EccpMaintenanceWorkFlow_Refuse_Links");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorks.EccpMaintenanceWorkLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MaintenanceItemsName")
                        .HasMaxLength(50);

                    b.Property<Guid>("MaintenanceWorkFlowId");

                    b.Property<string>("MaintenanceWorkFlowName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("EccpMaintenanceWorkLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Editions.ECCPEditionPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EditionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGranted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.ToTable("ECCPEditionPermissions");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Editions.ECCPEditionsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("ECCPEditionsTypes");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Friendships.Friendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("FriendProfilePictureId");

                    b.Property<string>("FriendTenancyName");

                    b.Property<int?>("FriendTenantId");

                    b.Property<long>("FriendUserId");

                    b.Property<string>("FriendUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FriendTenantId", "FriendUserId");

                    b.HasIndex("FriendTenantId", "UserId");

                    b.HasIndex("TenantId", "FriendUserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AppFriendships");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.LanFlows.LanFlowInstanceOperationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ActionDesc")
                        .HasMaxLength(200);

                    b.Property<string>("ActionValue")
                        .IsRequired();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Field");

                    b.Property<int>("FlowStatusActionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ObjectId");

                    b.Property<string>("StatusName")
                        .HasMaxLength(200);

                    b.Property<int>("StatusValue");

                    b.Property<string>("TaskDescription");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("FlowStatusActionId");

                    b.ToTable("LanFlowInstanceOperationHistories");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.LanFlows.LanFlowScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorizeType");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("SchemeContent")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SchemeName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SchemeType")
                        .HasMaxLength(50);

                    b.Property<int>("SortCode");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("LanFlowSchemes");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.LanFlows.LanFlowStatusAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ActionDesc")
                        .HasMaxLength(50);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ApiAction")
                        .HasMaxLength(150);

                    b.Property<int>("ArgumentValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsAdopt");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEndProcess");

                    b.Property<bool>("IsStartProcess");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("SchemeId");

                    b.Property<int>("SortCode");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("StatusValue");

                    b.Property<string>("UserRoleCode")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SchemeId");

                    b.ToTable("LanFlowStatusActions");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.Accounting.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("TenantAddress");

                    b.Property<string>("TenantLegalName");

                    b.Property<string>("TenantTaxNo");

                    b.HasKey("Id");

                    b.ToTable("AppInvoices");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.CompanyExtensions.EccpMaintenanceCompanyAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CheckState");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaintenanceCompanyId");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceCompanyId");

                    b.ToTable("EccpMaintenanceCompanyAuditLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.CompanyExtensions.EccpMaintenanceCompanyExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("AptitudePhotoId");

                    b.Property<Guid?>("BusinessLicenseId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMember");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LegalPerson")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("MaintenanceCompanyId");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<int?>("SyncCompanyId");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceCompanyId");

                    b.ToTable("EccpMaintenanceCompanyExtensions");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.CompanyExtensions.EccpPropertyCompanyAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CheckState");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("PropertyCompanyId");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("PropertyCompanyId");

                    b.ToTable("EccpPropertyCompanyAuditLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.CompanyExtensions.EccpPropertyCompanyExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("AptitudePhotoId");

                    b.Property<Guid?>("BusinessLicenseId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMember");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LegalPerson")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<int>("PropertyCompanyId");

                    b.Property<int?>("SyncCompanyId");

                    b.HasKey("Id");

                    b.HasIndex("PropertyCompanyId");

                    b.ToTable("EccpPropertyCompanyExtensions");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.EccpUserExtensions.EccpCompanyUserAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CheckState");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EccpCompanyUserAuditLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.EccpUserExtensions.EccpCompanyUserChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EccpCompanyUserChangeLogs");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.EccpUserExtensions.UserPathHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("PhoneId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPathHistories");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DayCount");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EditionId");

                    b.Property<int>("Gateway");

                    b.Property<string>("InvoiceNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PaymentId");

                    b.Property<int?>("PaymentPeriodType");

                    b.Property<int>("Status");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("PaymentId", "Gateway");

                    b.HasIndex("Status", "CreationTime");

                    b.ToTable("AppSubscriptionPayments");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<Guid?>("CustomCssId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInTrialPeriod");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LogoFileType")
                        .HasMaxLength(64);

                    b.Property<Guid?>("LogoId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SubscriptionEndDateUtc");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubscriptionEndDateUtc");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.UserExtensions.EccpCompanyUserExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CertificateBackPictureId");

                    b.Property<Guid?>("CertificateFrontPictureId");

                    b.Property<int>("CheckState");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<DateTime?>("Heartbeat");

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOnline");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<float?>("Latitude");

                    b.Property<float?>("Longitude");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<int?>("PositionCityId");

                    b.Property<long?>("PositionCommunityId");

                    b.Property<int?>("PositionDistrictId");

                    b.Property<int?>("PositionProvinceId");

                    b.Property<int?>("PositionStreetId");

                    b.Property<Guid?>("SignPictureId");

                    b.Property<int?>("SyncUserId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PositionCityId");

                    b.HasIndex("PositionCommunityId");

                    b.HasIndex("PositionDistrictId");

                    b.HasIndex("PositionProvinceId");

                    b.HasIndex("PositionStreetId");

                    b.HasIndex("UserId");

                    b.ToTable("EccpCompanyUserExtensions");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Storage.BinaryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Bytes")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppBinaryObjects");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Editions.ECCPEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<int?>("ECCPEditionsTypeId");

                    b.Property<bool>("IsRegister");

                    b.HasIndex("ECCPEditionsTypeId");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("ECCPEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Editions.SubscribableEdition", b =>
                {
                    b.HasBaseType("Sinodom.ElevatorCloud.Editions.ECCPEdition");

                    b.Property<decimal?>("AnnualPrice");

                    b.Property<int?>("ExpiringEditionId");

                    b.Property<decimal?>("MonthlyPrice");

                    b.Property<int?>("TrialDayCount");

                    b.Property<int?>("WaitingDayAfterExpire");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("SubscribableEdition");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Authorization.Roles.Role", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Authorization.Users.User", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseAnnualInspectionUnits.ECCPBaseAnnualInspectionUnit", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseCommunities.ECCPBaseCommunity", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseMaintenanceCompanies.ECCPBaseMaintenanceCompany", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseMaintenanceCompanies.EccpMaintenanceCompanyChangeLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseMaintenanceCompanies.ECCPBaseMaintenanceCompany", "MaintenanceCompany")
                        .WithMany()
                        .HasForeignKey("MaintenanceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseProductionCompanies.ECCPBaseProductionCompany", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBasePropertyCompanies.ECCPBasePropertyCompany", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBasePropertyCompanies.EccpPropertyCompanyChangeLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBasePropertyCompanies.ECCPBasePropertyCompany", "PropertyCompany")
                        .WithMany()
                        .HasForeignKey("PropertyCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.ECCPBaseRegisterCompanies.ECCPBaseRegisterCompany", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevatorBrands.EccpBaseElevatorBrand", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseProductionCompanies.ECCPBaseProductionCompany", "ProductionCompany")
                        .WithMany()
                        .HasForeignKey("ProductionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevatorLabels.EccpBaseElevatorLabel", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevator", "Elevator")
                        .WithMany()
                        .HasForeignKey("ElevatorId");

                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictLabelStatus", "LabelStatus")
                        .WithMany()
                        .HasForeignKey("LabelStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevatorLabels.EccpBaseElevatorLabelBindLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevator", "Elevator")
                        .WithMany()
                        .HasForeignKey("ElevatorId");

                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictLabelStatus", "LabelStatus")
                        .WithMany()
                        .HasForeignKey("LabelStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevatorModels.EccpBaseElevatorModel", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevatorBrands.EccpBaseElevatorBrand", "ElevatorBrand")
                        .WithMany()
                        .HasForeignKey("ElevatorBrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevator", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAnnualInspectionUnits.ECCPBaseAnnualInspectionUnit", "ECCPBaseAnnualInspectionUnit")
                        .WithMany()
                        .HasForeignKey("ECCPBaseAnnualInspectionUnitId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseCommunities.ECCPBaseCommunity", "ECCPBaseCommunity")
                        .WithMany()
                        .HasForeignKey("ECCPBaseCommunityId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseMaintenanceCompanies.ECCPBaseMaintenanceCompany", "ECCPBaseMaintenanceCompany")
                        .WithMany()
                        .HasForeignKey("ECCPBaseMaintenanceCompanyId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseProductionCompanies.ECCPBaseProductionCompany", "ECCPBaseProductionCompany")
                        .WithMany()
                        .HasForeignKey("ECCPBaseProductionCompanyId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBasePropertyCompanies.ECCPBasePropertyCompany", "ECCPBasePropertyCompany")
                        .WithMany()
                        .HasForeignKey("ECCPBasePropertyCompanyId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseRegisterCompanies.ECCPBaseRegisterCompany", "ECCPBaseRegisterCompany")
                        .WithMany()
                        .HasForeignKey("ECCPBaseRegisterCompanyId");

                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.ECCPDictElevatorStatus", "ECCPDictElevatorStatus")
                        .WithMany()
                        .HasForeignKey("ECCPDictElevatorStatusId");

                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevatorBrands.EccpBaseElevatorBrand", "EccpBaseElevatorBrand")
                        .WithMany()
                        .HasForeignKey("EccpBaseElevatorBrandId");

                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevatorModels.EccpBaseElevatorModel", "EccpBaseElevatorModel")
                        .WithMany()
                        .HasForeignKey("EccpBaseElevatorModelId");

                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictElevatorType", "EccpDictElevatorType")
                        .WithMany()
                        .HasForeignKey("EccpDictElevatorTypeId");

                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictPlaceType", "EccpDictPlaceType")
                        .WithMany()
                        .HasForeignKey("EccpDictPlaceTypeId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevatorSubsidiaryInfo", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevator", "Elevator")
                        .WithMany()
                        .HasForeignKey("ElevatorId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevators.EccpElevatorChangeLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevator", "Elevator")
                        .WithMany()
                        .HasForeignKey("ElevatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseElevators.ElevatorClaimLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevator", "Elevator")
                        .WithMany()
                        .HasForeignKey("ElevatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpBaseSaicUnits.EccpBaseSaicUnit", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpElevatorQrCodes.EccpElevatorQrCode", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevator", "Elevator")
                        .WithMany()
                        .HasForeignKey("ElevatorId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpElevatorQrCodes.EccpElevatorQrCodeBindLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevator", "NewElevator")
                        .WithMany()
                        .HasForeignKey("NewElevatorId");

                    b.HasOne("Sinodom.ElevatorCloud.EccpElevatorQrCodes.EccpElevatorQrCode", "NewQrCode")
                        .WithMany()
                        .HasForeignKey("NewQrCodeId");

                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevator", "OldElevator")
                        .WithMany()
                        .HasForeignKey("OldElevatorId");

                    b.HasOne("Sinodom.ElevatorCloud.EccpElevatorQrCodes.EccpElevatorQrCode", "OldQrCode")
                        .WithMany()
                        .HasForeignKey("OldQrCodeId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceContracts.EccpMaintenanceContract", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseMaintenanceCompanies.ECCPBaseMaintenanceCompany", "MaintenanceCompany")
                        .WithMany()
                        .HasForeignKey("MaintenanceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBasePropertyCompanies.ECCPBasePropertyCompany", "PropertyCompany")
                        .WithMany()
                        .HasForeignKey("PropertyCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceContracts.EccpMaintenanceContract_Elevator_Link", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevator", "Elevator")
                        .WithMany()
                        .HasForeignKey("ElevatorId");

                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceContracts.EccpMaintenanceContract", "MaintenanceContract")
                        .WithMany()
                        .HasForeignKey("MaintenanceContractId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlan", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpBaseElevators.EccpBaseElevator", "Elevator")
                        .WithMany()
                        .HasForeignKey("ElevatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlan_MaintenanceUser_Link", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlan", "MaintenancePlan")
                        .WithMany()
                        .HasForeignKey("MaintenancePlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlan_PropertyUser_Link", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlan", "MaintenancePlan")
                        .WithMany()
                        .HasForeignKey("MaintenancePlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlan_Template_Link", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlan", "MaintenancePlan")
                        .WithMany()
                        .HasForeignKey("MaintenancePlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceTemplates.EccpMaintenanceTemplate", "MaintenanceTemplate")
                        .WithMany()
                        .HasForeignKey("MaintenanceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTempWorkOrderActionLogs.EccpMaintenanceTempWorkOrderActionLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceTempWorkOrders.EccpMaintenanceTempWorkOrder", "TempWorkOrder")
                        .WithMany()
                        .HasForeignKey("TempWorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTempWorkOrders.EccpMaintenanceTempWorkOrder", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseMaintenanceCompanies.ECCPBaseMaintenanceCompany", "MaintenanceCompany")
                        .WithMany()
                        .HasForeignKey("MaintenanceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictTempWorkOrderType", "TempWorkOrderType")
                        .WithMany()
                        .HasForeignKey("TempWorkOrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTemplateNodes.EccpMaintenanceTemplateNode", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictNodeType", "DictNodeType")
                        .WithMany()
                        .HasForeignKey("DictNodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceTemplates.EccpMaintenanceTemplate", "MaintenanceTemplate")
                        .WithMany()
                        .HasForeignKey("MaintenanceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTemplateNodes.EccpMaintenanceTemplateNode_DictMaintenanceItem_Link", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictMaintenanceItem", "DictMaintenanceItem")
                        .WithMany()
                        .HasForeignKey("DictMaintenanceItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceTemplateNodes.EccpMaintenanceTemplateNode", "MaintenanceTemplateNode")
                        .WithMany()
                        .HasForeignKey("MaintenanceTemplateNodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTemplates.EccpMaintenanceTemplate", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictElevatorType", "ElevatorType")
                        .WithMany()
                        .HasForeignKey("ElevatorTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictMaintenanceType", "MaintenanceType")
                        .WithMany()
                        .HasForeignKey("MaintenanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTransfers.EccpMaintenanceTempWorkOrderTransfer", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceTempWorkOrders.EccpMaintenanceTempWorkOrder", "MaintenanceTempWorkOrder")
                        .WithMany()
                        .HasForeignKey("MaintenanceTempWorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "TransferUser")
                        .WithMany()
                        .HasForeignKey("TransferUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTransfers.EccpMaintenanceTempWorkOrderTransferAuditLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceTransfers.EccpMaintenanceTempWorkOrderTransfer", "MaintenanceTempWorkOrderTransfer")
                        .WithMany()
                        .HasForeignKey("MaintenanceTempWorkOrderTransferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTransfers.EccpMaintenanceWorkOrderTransfer", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceWorkOrders.EccpMaintenanceWorkOrder", "MaintenanceWorkOrder")
                        .WithMany()
                        .HasForeignKey("MaintenanceWorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "TransferUser")
                        .WithMany()
                        .HasForeignKey("TransferUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceTransfers.EccpMaintenanceWorkOrderTransferAuditLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceTransfers.EccpMaintenanceWorkOrderTransfer", "MaintenanceWorkOrderTransfer")
                        .WithMany()
                        .HasForeignKey("MaintenanceWorkOrderTransferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorkOrders.EccpMaintenanceTroubledWorkOrder", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceWorkOrders.EccpMaintenanceWorkOrder", "MaintenanceWorkOrder")
                        .WithMany()
                        .HasForeignKey("MaintenanceWorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorkOrders.EccpMaintenanceWorkOrder", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenancePlans.EccpMaintenancePlan", "MaintenancePlan")
                        .WithMany()
                        .HasForeignKey("MaintenancePlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictMaintenanceStatus", "MaintenanceStatus")
                        .WithMany()
                        .HasForeignKey("MaintenanceStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictMaintenanceType", "MaintenanceType")
                        .WithMany()
                        .HasForeignKey("MaintenanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorkOrders.EccpMaintenanceWorkOrderEvaluation", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceWorkOrders.EccpMaintenanceWorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorks.EccpMaintenanceWork", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceWorkOrders.EccpMaintenanceWorkOrder", "MaintenanceWorkOrder")
                        .WithMany()
                        .HasForeignKey("MaintenanceWorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorks.EccpMaintenanceWorkFlow", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictMaintenanceWorkFlowStatus", "DictMaintenanceWorkFlowStatus")
                        .WithMany()
                        .HasForeignKey("DictMaintenanceWorkFlowStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceTemplateNodes.EccpMaintenanceTemplateNode", "MaintenanceTemplateNode")
                        .WithMany()
                        .HasForeignKey("MaintenanceTemplateNodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceWorks.EccpMaintenanceWork", "MaintenanceWork")
                        .WithMany()
                        .HasForeignKey("MaintenanceWorkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorks.EccpMaintenanceWorkFlow_Item_Link", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpDict.EccpDictMaintenanceItem", "DictMaintenanceItem")
                        .WithMany()
                        .HasForeignKey("DictMaintenanceItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceWorks.EccpMaintenanceWorkFlow", "MaintenanceWorkFlow")
                        .WithMany()
                        .HasForeignKey("MaintenanceWorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.EccpMaintenanceWorks.EccpMaintenanceWorkFlow_Refuse_Link", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.EccpMaintenanceWorks.EccpMaintenanceWorkFlow", "MaintenanceWorkFlow")
                        .WithMany()
                        .HasForeignKey("MaintenanceWorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Editions.ECCPEditionPermission", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.LanFlows.LanFlowInstanceOperationHistory", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.LanFlows.LanFlowStatusAction", "FlowStatusAction")
                        .WithMany()
                        .HasForeignKey("FlowStatusActionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.LanFlows.LanFlowStatusAction", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.LanFlows.LanFlowScheme", "Scheme")
                        .WithMany()
                        .HasForeignKey("SchemeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.CompanyExtensions.EccpMaintenanceCompanyAuditLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseMaintenanceCompanies.ECCPBaseMaintenanceCompany", "MaintenanceCompany")
                        .WithMany()
                        .HasForeignKey("MaintenanceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.CompanyExtensions.EccpMaintenanceCompanyExtension", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseMaintenanceCompanies.ECCPBaseMaintenanceCompany", "MaintenanceCompany")
                        .WithMany()
                        .HasForeignKey("MaintenanceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.CompanyExtensions.EccpPropertyCompanyAuditLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBasePropertyCompanies.ECCPBasePropertyCompany", "PropertyCompany")
                        .WithMany()
                        .HasForeignKey("PropertyCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.CompanyExtensions.EccpPropertyCompanyExtension", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBasePropertyCompanies.ECCPBasePropertyCompany", "PropertyCompany")
                        .WithMany()
                        .HasForeignKey("PropertyCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.EccpUserExtensions.EccpCompanyUserAuditLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.EccpUserExtensions.EccpCompanyUserChangeLog", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.EccpUserExtensions.UserPathHistory", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.MultiTenancy.UserExtensions.EccpCompanyUserExtension", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "PositionCity")
                        .WithMany()
                        .HasForeignKey("PositionCityId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseCommunities.ECCPBaseCommunity", "PositionCommunity")
                        .WithMany()
                        .HasForeignKey("PositionCommunityId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "PositionDistrict")
                        .WithMany()
                        .HasForeignKey("PositionDistrictId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "PositionProvince")
                        .WithMany()
                        .HasForeignKey("PositionProvinceId");

                    b.HasOne("Sinodom.ElevatorCloud.ECCPBaseAreas.ECCPBaseArea", "PositionStreet")
                        .WithMany()
                        .HasForeignKey("PositionStreetId");

                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sinodom.ElevatorCloud.Editions.ECCPEdition", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Editions.ECCPEditionsType", "ECCPEditionsType")
                        .WithMany()
                        .HasForeignKey("ECCPEditionsTypeId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("Sinodom.ElevatorCloud.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
